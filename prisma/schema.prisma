// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId   String @unique
  email     String  @unique
  firstName String?  @unique
  lastName  String? @unique
  createdAt DateTime @default(now())
  subscription Subscription?
  integrations Integrations[]
  automations Automation[]
}

model Subscription {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?    @unique @db.Uuid
}
model Integrations {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        INTEGRATIONS  @default(INSTAGRAM)
  createdAt      DateTime @default(now())
  User          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?    @unique @db.Uuid
  token          String     @unique
  expires_at DateTime 
  active         Boolean  @default(false)
}
model Automation {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String @default("Untitled")
  createdAt      DateTime @default(now())
  active         Boolean  @default(false)
  trigger        Trigger[]
  listener       Listener?
  posts          Post[]
  dms            Dms[]

  User          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?    @unique @db.Uuid 
}


model Trigger {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type        String 
  Automation    Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId  String?     @db.Uuid
}

model Listener {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId  String      @unique @db.Uuid
  listener      LISTENERS   @default(MESSAGE)
  prompt        String
  commentReply  String?
  dmCount       Int         @default(0)
  commentCount  Int         @default(0)
  Automation    Automation  @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Dms {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId  String?     @db.Uuid
  createdAt     DateTime    @default(now())
  senderId      String?
  reciever      String?
  message       String?
  Automation    Automation? @relation(fields: [automationId], references: [id])
}

model Post {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid        String
  caption       String?
  media         String
  mediaType     MEDIATYPE   @default(IMAGE)
  automationId  String?     @db.Uuid
  Automation    Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

enum INTEGRATIONS{
  INSTAGRAM
}
enum LISTENERS{
  SMARTAI
  MESSAGE
}

enum MEDIATYPE{
  IMAGE
  VIDEO
  CAROCEL_ALBUM
}
enum SUBSCRIPTION_PLAN{
  FREE
  PRO
}